- Class: meta
  Course: Applied Statistics
  Lesson: Discrete Probability Distributions
  Author: Walter Garcia-Fontes
  Type: Standard
  Organization: Universitat Pompeu Fabra
  Version: 1.0.0

- Class: text
  Output: R has different functions to work with discrete probability
    distributions. There are also add-on packages that provide
    additional functions and features. In this tutorial we will review
    some of the functions available in base R and some other available
    in specialized packages.

- Class: cmd_question
  Output: A discrete probability distribution is just the distribution
    of values for a variable that can only take discrete values, that
    is, it is given by these values and their relative
    frequency. Imagine for instance that we have data on the returns of
    an investment, and that the values can go from 8 thousands (8) to
    12 thousands (12), that is possible returns can be 8, 9, 10, 11 or
    12 thousands. Define a vector with these values and assign it to
    an object called "val".
  CorrectAnswer: c(8,9,10,11,12)
  AnswerTests: any_of_exprs('val <- 8:12', 'val <- c(8,9,10,11,12)', 'val <- seq(8,12,1)')
  Hint: You have to define a vector that has the values 8, 9, 10,
      11, and 12, and assign it to "val", you can do it using
      different equivalent R expressions, such as "val <- c(8,9,10,11,12)",
      "val <- 8:12", or "val <- seq(8,12,1)".

- Class: cmd_question
  Output: Let's now create a vector called "probs" with the relative
    frequency for each possible return. The corresponding
    probabilities for 8, 9, 10, 11 and 12 thousands are 0.1, 0.2, 0.4, 0.2
    and 0.1. Create this vector now.
  CorrectAnswer: probs <- c(0.1, 0.2,0.4,0.2,0.1)
  AnswerTests: omnitest(correctExpr='probs <- c(0.1, 0.2,0.4,0.2,0.1)')
  Hint: You have to define a vector called "probs" with the
    corresponding probabilities, and you can do it with the command
    "probs <- c(0.1, 0.2, 0.4, 0.2, 0.1)".

- Class: cmd_question
  Output: We can now compute different statistics for the probability
    distribution of the "val" variable. For instance multiplying the
    vectors "val" and "probs" in the distribution, and getting the sum of
    the resulting elements,  will give us the expectation (mean) of
    the distribution.  Do it now, without assigning the result to any
    object.
  CorrectAnswer: 10
  AnswerTests: omnitest(correctVal = 10)
  Hint: You can enter, for instance, sum(val*probs).

- Class: text
  Output: There are some other more compact ways to define a
    probability distribution. For instance, the "distr" package can be
    used. We have loaded this package already for you.

- Class: cmd_question
  Output: With this package, we could enter the command
    "X <- DiscreteDistribution(supp=8:12, prob = c(0.1,0.2,0.4,0.2,0.1))"
    to define the same probability distribution than before. Try it now.
  CorrectAnswer: X <- DiscreteDistribution(supp=8:12, prob = c(0.1,0.2,0.4,0.2,0.1))
  AnswerTests: omnitest(correctExpr='X <- DiscreteDistribution(supp=8:12, prob = c(0.1,0.2,0.4,0.2,0.1))')
  Hint: You have to enter "X <- DiscreteDistribution(supp=8:12, prob = c(0.1,0.2,0.4,0.2,0.1))".

- Class: cmd_question
  Output: The object "X" that you just created, is an object of class
    "distr", that is a distribution object, a class which is defined
    by the "distr" package. With these type of objects, the different
    statistics such as the expectation (E(X)), the variance (var(X)) or
    the standard deviation (sd(X)) can be directly computed, and we don't
    need a formula as we used before. Compute now the variance for
    this probability distrbution using the "X" object.
  CorrectAnswer: var(X)
  AnswerTests: omnitest(correctExpr='var(X)')
  Hint: You have to enter "var(X)".

- Class: text
  Output: Probability distributions adopt different patterns depending
    on the type of experiment that generates the data. For instance,
    rolling a fair die, that is where each side has the same chance of
    appearing, will generate a distribution known as the "uniform
    distribution", so called because the relative frequency for all
    values is uniform, the same relative frequency. Theoretically, a
    fair die will generate a distribution with 6 possible values (1 to
    6), each with a relative frequency equal to 1/6.

- Class: cmd_question
  Output: To perform an experiment of throwing a die, we can use the
    "sample" function of R. This is a function that generates random
    numbers with and without replacement, that is, allowing for
    repeated values or not. For instance to generate 3000 die throws,
    where in each throw there is a 1/6 chance that a given side will
    be thrown, we can issue the command
    "unif <- sample(1:6, size=3000, replace=TRUE)". Try it now.
  CorrectAnswer: unif <- sample(1:6, size=3000, replace=TRUE)
  AnswerTests: omnitest(correctExpr='unif <- sample(1:6, size=3000, replace=TRUE)')
  Hint: Enter "unif <- sample(1:6, size=3000, replace=TRUE)".

- Class: cmd_question
  Output: We can now represent the uniform distribution that we have
    generated with "barplot(prop.table(table(unif)))". Generate the barplot
    for this distribution.
  CorrectAnswer: barplot(prop.table(table(unif)))
  AnswerTests: omnitest(correctExpr='barplot(prop.table(table(unif)))')
  Hint: Enter "barplot(prop.table(table(unif)))".

- Class: cmd_question
  Output: The uniform distribution that we have generated is an
    empirical distribution. That is, the probabilities have been
    generated by an experiment, and therefore they are not exactly
    equal to the value predicted by the theory (1/6). To generate
    the theoretical uniform distribution, we have to create a data
    frame with the different possible values and the associated relative
    frequency. For instance "data.frame(prob=rep(1/6,6))", which is telling
    R to generate a data frame with a variable called "prob" which has
    6 repetitions (using the rep() function) of the value 1/6. Try it now.
  CorrectAnswer: data.frame(prob=rep(1/6,6))
  AnswerTests: omnitest('data.frame(prob=rep(1/6,6))')
  Hint: Enter "data.frame(prob=rep(1/6,6))".

- Class: cmd_question
  Output: To represent this distribution graphically, we can use again
    a barplot, with "barplot(prop.table(table(1:6)))". Try it now.
  CorrectAnswer: barplot(prop.table(table(1:6)))
  AnswerTests: omnitest(correctExpr='barplot(prop.table(table(1:6)))')
  Hint: Enter "barplot(prop.table(table(1:6)))".

- Class: text
  Output: R has several discrete and continuous probability functions
    built in. In all of them, the same convention is used. For
    instance, for the uniform distribution, so far we have seen the
    probability distribution, which in statistics is called the
    probability density function, and the corresponding R function
    is dunif(). There is also the cumulative distribution function,
    punif(), that gives the cumulative relative frequency. There is
    also the     quantile function, qunif(), that is the inverse of
    the cumulative distribution function, that is for a given
    cumulative relative frequency it gives the associated value, and
    finally there is a random value generator, runif(), which generates
    a random value that follows the given uniform distribution.

- Class: cmd_question
  Output: For instance "punif(2, min=0, max=6)" will give us the
    probability to get a 2 or less in this uniform distribution. Enter
    the appropriate command to get the probability to get 3 or less in
    this uniform distribution.
  CorrectAnswer: punif(3, min=0, max=6)
  AnswerTests: omnitest(correctExpr='punif(3, min=0, max=6)')
  Hint: Substitute the 2 by a 3 in the above function.

- Class: mult_question
  Output: If you enter "qunif(5/6, min=0, max=6)", you will get
  AnswerChoices: 2; 3; 4; 5; 6
  CorrectAnswer: 5
  AnswerTests: omnitest(correctVal='5')
  Hint: Think what value would accumulate 5/6 of the relative
    frequency in the uniform distribution generated by a fair die.

- Class: cmd_question
  Output: Another discrete distribution that we can represent with R
    is the binomial distribution. The corresponding function for
    the binomial probability distribution is dbinom(). For instance
    to generate the binomial distribution generated by throwing 4
    times a fair coin and checking how many heads we get, we can enter
    "data.frame(Pr=dbinom(0:4, size=4, prob=0.5))". Enter now this
    command and call "A" the generated data frame.
  CorrectAnswer: A <- data.frame(Pr=dbinom(0:4, size=4, prob=0.5))
  AnswerTests: omnitest(correctExpr='A <- data.frame(Pr=dbinom(0:4, size=4, prob=0.5))')
  Hint: Enter "A <- data.frame(Pr=dbinom(0:4, size=4, prob=0.5))".

- Class: cmd_question
  Output: Enter now "A" to see the content of the data frame we just created.
  CorrectAnswer: A
  AnswerTests: omnitest(correctExpr='A')
  Hint: Enter "A".

- Class: cmd_question
  Output: As you can see, the rows are named from 1 to 5, but we would
    like them to go from 0 to 4, that is "no heads", "1 head", "2
    heads", "3 heads" or "4 heads" in the 4 throws. To name the rows
    this way, we can use the rownames() function. The syntax is
    "rownames(A) <- c(0,1,2,3,4)", for instance. Try it now.
  CorrectAnswer: rownames(A) <- c(0,1,2,3,4)
  AnswerTests: omnitest(correctExpr='rownames(A) <- c(0,1,2,3,4)')
  Hint: Enter "rownames(A) <- c(0,1,2,3,4)".

- Class: cmd_question
  Output: Enter now "A" again to see how it looks now.
  CorrectAnswer: A
  AnswerTests: omnitest(correctExpr='A')
  Hint: Enter "A".

- Class: cmd_question
  Output: As with the uniform distribution, the functions for the
    binomial distribution also have the family of d, p, q and r functions.
    For instance "barplot(prop.table(table(rbinom(1000,size=4,p=0.5))))" will
    generate 1000 random numbers that follow a binomial distribution
    with probability of success equal to 0.5 over 4 trials, and will
    plot the distribution in a barplot. Try it now.
  CorrectAnswer: barplot(prop.table(table(rbinom(1000,size=4,p=0.5))))
  AnswerTests: omnitest(correctExpr='barplot(prop.table(table(rbinom(1000,size=4,p=0.5))))')
  Hint: Enter "barplot(prop.table(table(rbinom(1000,size=4,p=0.5))))".

- Class: cmd_question
  Output: Another commonly used discrete probability function is the
    Poisson distribution, which is used when the experiment is based
    on a count of successes. The probability density function is given
    by the function dpois() which takes two arguments. The first one
    is a value, and the second one is the average of the Poisson
    (which is commonly denoted by lambda). Compute now the probability
    that we get 3 or less counts for a Poisson with an average equal
    to 6.
  CorrectAnswer: dpois(3,6)
  AnswerTests: omnitest(correctExpr='dpois(3,6)')
  Hint: You have to write "dpois(3,6)".

- Class: cmd_question
  Output: As we all other probability distribution functions
    (discrete or continuous) the family of R functions for the Poisson
    distribution include the "d", "p", "q" and "r" version. Try to
    write, for instance, the appropriate function to find out the
    value that has a cumulative relative frequency of 60% in a Poisson
    with an average equal to 7.
  CorrectAnswer: qpois(0.6,7)
  AnswerTests: omnitest(correctExpr='qpois(0.6,7)')
  Hint: If we want to find out the value associated with a 60%
    accumulated relative frequency, we need to enter 0.6 in the "q" version
    of the function, that is "qpois(0.6,7)".

- Class: text
  Output: Having reviewed generic discrete probability functions, the
    discrete uniform, the binomial and the Poisson, we already know how
    to deal with important discrete probability functions in R, and
    this finishes this tutorial.
