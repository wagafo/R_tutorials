- Class: meta
  Course: R Tutorials
  Lesson: Prediction
  Author: Walter Garcia-Fontes (based on http://www.sthda.com/english/articles/40-regression-analysis/166-predict-in-r-model-predictions-and-confidence-intervals/)
  Type: Standard
  Organization: Universitat Pompeu Fabra
  Version: 1.0.0

- Class: text
  Output: We start by building a simple linear regression model that
    predicts the stopping distances of cars on the basis of the speed.
- Class: cmd_question
  Output: We have uploaded a data frame for you called "cars", that has two
    variables called "dist" (stopping distance) and "speed" (speed of
    the car.) Estimate a regression of "dist" on "speed", and assign
    the result to an object called "model".
  CorrectAnswer: model <- lm(dist~speed, data=cars)
  AnswerTests: any_of_exprs('model <- lm(dist~speed,data=cars)','model <- lm(cars$dist~cars$speed)')
  Hint: You have to enter "model <- lm(dist~speed, data=cars)" or
    "model <- lm(cars$dist~cars$speed)".

- Class: cmd_question
  Output: Check now the results of the regression by giving the name
    of the object that you just created at the command line.
  CorrectAnswer: model
  AnswerTests: any_of_exprs('model')
  Hint: Just enter "model" at the command line.

- Class: mult_question
  Output: According to the results in the regression output
  AnswerChoices: the constant is -17.58 and the slope is 3.93; the constant is -3.93 and the slope is 17.58
  CorrectAnswer: the constant is -17.58 and the slope is 3.93
  AnswerTests: omnitest(correctVal='the constant is -17.58 and the slope is 3.93')
  Hint: The constant value is under "(Intercept)" and the slope is under "sleep".

- Class: text
  Output: The linear model equation can be written as follow, "dist =
    -17.579 + 3.932*speed". Note that, the units of the variable speed
    and dist are respectively, mph and ft.

- Class: cmd_question
  Output: Using the above model, we can predict the stopping distance
    for a new speed value. Start by creating a new data frame
    containing, for example, three new speed values, "data.frame(
    speed = c(12, 19, 24)", assign this data frame to object called
    "new.speeds".
  CorrectAnswer: new.speeds <- data.frame(speed = c(12, 19, 24))
  AnswerTests: omnitest(correctExpr='new.speeds <- data.frame(speed = c(12, 19, 24))')
  Hint: You have to enter "new.speeds <- data.frame(speed = c(12, 19, 24))".

- Class: cmd_question
  Output: You can predict the corresponding stopping distances using
    the R function predict() as follows, "predict(model, newdata = new.speeds)".
    Try it now.
  CorrectAnswer: predict(model, newdata = new.speeds)
  AnswerTests: omnitest(correctExpr='predict(model, newdata = new.speeds)')
  Hint: You have to enter "predict(model, newdata = new.speeds)" to
    predict distance for the new values of speed.

- Class: mult_question
  Output: According to the prediction, the distance for a value of
    speed equal to 19 is
  AnswerChoices: 29.6 ; 57.1 ; 76.8
  CorrectAnswer: 57.1
  AnswerTests: omnitest(correctVal='57.1')
  Hint: Check the value in the output that corresponds to a speed
    equal to 19.

- Class: cmd_question
  Output: The confidence interval reflects the uncertainty around the
    mean predictions. To display the 95% confidence intervals around the
    mean the predictions, add the argument 'interval = "confidence"'
    to the predict() function that you just used. Do it now.
  CorrectAnswer: predict(model, newdata = new.speeds, interval = "confidence")
  AnswerTests: omnitest(correctExpr='predict(model, newdata = new.speeds, interval = "confidence")')
  Hint: You have to enter "predict(model, newdata = new.speeds,
    interval = "confidence")" to get a confidence interval for the
    predictions.

- Class: text
  Output: The output contains three columns. The first one, "fit", contains
    the predicted distance values for the three new speeds.
    "lwr" and "upr" contain the lower and the upper confidence limits
    for the expected values, respectively. By default the function
    produces the 95% confidence limits.

- Class: mult_question
  Output: For example, the 95% confidence interval associated with a
    speed of 19 is (51.8, 62.4). This means that
  AnswerChoices: according to our model, the average true speed of a car with 19 mph will be in an interval ranging between 51.8 and 62.4; according to our model, there is 5% chance that the true average speed of a car with 19mph will not be in an interval ranging between 51.8 and 62.4
  CorrectAnswer: according to our model, there is 5% chance that the true average speed of a car with 19mph will not be in an interval ranging between 51.8 and 62.4
  AnswerTests: omnitest(correctVal='according to our model, there is 5% chance that the true average speed of a car with 19mph will not be in an interval ranging between 51.8 and 62.4')
  Hint: This is a confidence interval for the mean predicted value, so
    there is a 95% chance that the mean distance will be within
    the given interval, and so there is a 5% chance that this interval
    misses the true average distance.

- Class: cmd_question
  Output: The prediction interval gives uncertainty around a single
    value. In the same way, as the confidence intervals, the prediction
    intervals can be computed using the predict function, but using
    "prediction" instead of "confidence" in the interval argument. Try
    now to obtain the prediction interval for distance for the same
    set of speeds as before.
  CorrectAnswer: predict(model, newdata = new.speeds, interval = "prediction")
  AnswerTests: omnitest(correctExpr='predict(model, newdata = new.speeds, interval = "prediction")')
  Hint: You have to enter "predict(model, newdata = new.speeds,
    interval = "prediction")" to get a confidence interval for the
    predicptions.

- Class: mult_question
  Output: For example, the 95% prediction interval associated with a
    speed of 19 is (25.75, 88.5). This means that
  AnswerChoices: according to our model, the true speed of a car with 19 mph will be in an interval ranging between 25.75 and 88.5; according to our model, there is 95% chance that the true speed of a car with 19mph will be in an interval ranging between 25.76 and 88.5
  CorrectAnswer: according to our model, there is 95% chance that the true speed of a car with 19mph will be in an interval ranging between 25.76 and 88.5
  AnswerTests: omnitest(correctVal='according to our model, there is 95% chance that the true speed of a car with 19mph will be in an interval ranging between 25.76 and 88.5')
  Hint: This is a confidence interval for the actual predicted value
    (not the mean, so there is a 95% chance that the true distance
    will be within  the given interval.

- Class: figure
  Output: We can represent the confidence and prediction interval in
    the scatterplot. In the figure on the right. The scatterplot shows
    the regression line in blue, the confidence band in gray and the
    prediction band in red.
  Figure: figure_bands.R
  FigureType: new

- Class: text
  Output: As you can see, the prediction interval is much wider than
    the confidence interval, as it tries to predict the true value of
    distance and not the average value of distance. Predicting the
    actual value has more uncertainty than predicting the average
    value.

- Class: text
  Output: Which one should we use? The answer to this question depends
    on the context and the purpose of the analysis. Generally, we are
    interested in specific individual predictions, so a prediction
    interval would be more appropriate. Using a confidence interval when
    you should be using a prediction interval will greatly underestimates
    the uncertainty in a given predicted value.

- Class: text
  Output: With this, we finish this tutorial about prediction in the
    regression model.
